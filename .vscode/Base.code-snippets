{
	// Place your Berzerk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// General

	"Service": {
		"prefix": ["GetService"],
		"body": ["local ${0:Name}Service = game:GetService(\"${0:Name}Service\")"],
		"description": "Roblox Service"
	},


	// Knit Specific

	"Knit": {
		"prefix": ["Knit"],
		"body": ["local Knit = require(game:GetService('ReplicatedStorage').Packages.Knit)"],
		"description": "Require the Knit module"
	},

	"Knit Service": {
		"prefix": ["KnitService"],
		"body": [
			"local Knit = require(game:GetService('ReplicatedStorage').Packages.Knit)",
			"",
			"local ${0:$TM_FILENAME_BASE} = Knit.CreateService {",
			"\tName = \"${0:$TM_FILENAME_BASE}\",",
			"\tClient = {},",
			"}",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitStart()",
			"\t",
			"end",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitInit()",
			"\t",
			"end",
			"",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Knit Service template"
	},

	"Knit Controller": {
		"prefix": ["KnitController"],
		"body": [
			"local Knit = require(game:GetService('ReplicatedStorage').Packages.Knit)",
			"",
			"local ${0:$TM_FILENAME_BASE} = Knit.CreateController { Name = \"${0:$TM_FILENAME_BASE}\" }",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitStart()",
			"\t",
			"end",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitInit()",
			"\t",
			"end",
			"",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Knit Controller template"
	},

	"Knit Require": {
		"prefix": ["KnitRequire"],
		"body": ["local ${1:Name} = require(Knit.${2:Util}.${1:Name})"],
		"description": "Knit Require template"
	},

	"Class": {
		"prefix": ["Class"],
		"body": [
			"local ${0:$TM_FILENAME_BASE} = {}",
			"${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}.new()",
			"\tlocal self = setmetatable({}, ${0:$TM_FILENAME_BASE})",
			"\treturn self",
			"end",
			"",
			"",
			"function ${0:$TM_FILENAME_BASE}:Destroy()",
			"\t",
			"end",
			"",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Lua Class"
	},

	"Ability": { 										// Ability
		"prefix": ["Ability"],
		"body": [
			"local ${0:$TM_FILENAME_BASE} = {}",
			"${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",
			"",
			"function ${0:$TM_FILENAME_BASE}.new()",
			"\tlocal self = setmetatable({}, ${0:$TM_FILENAME_BASE})",
			"\tself:Init()",
			"\treturn self",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Init()",
			"\t",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Trigger(Player:Player)",
			"\t",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Destroy()",
			"\t",
			"end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
		],
		"description": "Lua Class"
	},

	"Gadget": { 										// Gadget
	"prefix": ["Gadget"],
	"body": [
		"local ${0:$TM_FILENAME_BASE} = {}",
		"${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",
		"",
		"function ${0:$TM_FILENAME_BASE}.new(Owner: Player, CameraPosition, CameraLookVector, GadgetCore)",
		"\tlocal self = setmetatable({}, ${0:$TM_FILENAME_BASE})",
		"\tself.Owner = Owner",
		"",
		"\tself.CameraPosition = CameraPosition",
    	"\tself.CameraLookVector = CameraLookVector",
		"",
		"\tself.GadgetCore = GadgetCore",
		"\tself.EGadgetType = GadgetCore.EGadgetType -- << Throwable, Placeable, Visual",
		"\tself.Asset",
		"",
		"\treturn self",
		"end",
		"",
		"function ${0:$TM_FILENAME_BASE}:Trigger()",
		"\t",
		"end",
		"",
		"return ${0:$TM_FILENAME_BASE}",
	],
	"description": "Lua Class"
},

	"GamemodePreset": { 										// GamemodePreset
	"prefix": ["GamemodePreset"],
	"body": [
		"local Assets = game:GetService('ReplicatedStorage'):WaitForChild('Assets')",
		"",
		"local Addons = {}",
		"",
		"return {",
		"   Display_Name = 'DISPLAY NAME',",
		"   Is_Ranked = true,",
		"   Addons = Addons,",
		"   TimeLimit = 999,",
		"   ScoreToWin = 999",
		"}"
	],
	"description": "Lua Class"
},

}

